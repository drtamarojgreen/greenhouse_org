import wixData from 'wix-data';

// --- Exported API Functions ---

/**
 * Lists all available services for the frontend.
 * @returns {Array} - An array of service objects with id and name.
 */
export async function getServices() {
    try {
        const results = await wixData.query("Services").find();
        return results.items.map(item => ({
            id: item._id,
            name: item.name
        }));
    } catch (error) {
        console.error("Error fetching services from Wix Data:", error);
        throw new Error("Failed to retrieve services.");
    }
}

// --- Data Manipulation Helpers for Internal Backend Use ---

/**
 * Returns the raw services object including events.
 * Intended for use by other backend modules (e.g., scheduling.jsw).
 * @returns {object} - The full services object.
 */
/*
export async function getServiceAppointments() {
    try {
        const results = await wixData.query("Appointments").find();
        return results.items; // Returns all appointments from the Appointments collection
    } catch (error) {
        console.error("Error fetching all appointments from Wix Data:", error);
        throw new Error("Failed to retrieve all appointments.");
    }
}
*/

/**
 * Adds an appointment to a specific service's appointment list.
 * @param {string} serviceId - The ID of the service.
 * @param {object} appointment - The appointment object to add.
 */
/*
export async function addAppointmentToService(serviceId, appointment) {
    try {
        // Assuming 'appointment' object already contains necessary fields like title, start, end, etc.
        // Add serviceId as a reference field
        const appointmentToInsert = { ...appointment, serviceRef: serviceId };
        const insertedAppointment = await wixData.insert("Appointments", appointmentToInsert);
        return insertedAppointment;
    } catch (error) {
        console.error("Error adding appointment to Wix Data:", error);
        throw new Error("Failed to add appointment.");
    }
}
*/

/**
 * Updates an appointment within a specific service's appointment list.
 * @param {string} serviceId - The ID of the service.
 * @param {string} appointmentId - The ID of the appointment to update.
 * @param {object} updatedData - The new appointment data.
 * @returns {object|null} - The updated appointment or null if not found.
 */
/*
export async function updateAppointmentInService(serviceId, appointmentId, updatedData) {
    try {
        // Query for the appointment by its _id and serviceRef
        const results = await wixData.query("Appointments")
                                .eq("_id", appointmentId)
                                .eq("serviceRef", serviceId)
                                .find();

        if (results.items.length === 0) {
            return null; // Appointment not found
        }

        const appointmentToUpdate = results.items[0];
        const updatedAppointment = await wixData.update("Appointments", { ...appointmentToUpdate, ...updatedData });
        return updatedAppointment;
    } catch (error) {
        console.error("Error updating appointment in Wix Data:", error);
        throw new Error("Failed to update appointment.");
    }
}
*/

/**
 * Deletes an appointment from a specific service's appointment list.
 * @param {string} serviceId - The ID of the service.
 * @param {string} appointmentId - The ID of the appointment to delete.
 * @returns {boolean} - True if deletion was successful, false otherwise.
 */
/*
export async function deleteAppointmentFromService(serviceId, appointmentId) {
    try {
        const results = await wixData.query("Appointments")
                                .eq("_id", appointmentId)
                                .eq("serviceRef", serviceId)
                                .find();

        if (results.items.length === 0) {
            return false; // Appointment not found
        }

        await wixData.remove("Appointments", appointmentId);
        return true;
    } catch (error) {
        console.error("Error deleting appointment from Wix Data:", error);
        throw new Error("Failed to delete appointment.");
    }
}
*/
