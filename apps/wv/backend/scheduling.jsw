import { services, getServiceEvents, addEventToService, updateEventInService, deleteEventFromService } from 'backend/services.jsw';

// In a real Wix application, you would use Wix Data Collections for persistent storage.
// For this example, we are replicating the in-memory logic from the original server.js.
let nextEventId = 1;
const generateId = () => nextEventId++;

/**
 * Checks for scheduling conflicts for a given event.
 * @param {object} newEvent - The event object to check.
 * @returns {Array} - A list of conflicting events.
 */
function checkConflict(newEvent) {
    const newEventStart = new Date(newEvent.start);
    const newEventEnd = new Date(newEvent.end);

    const allEvents = getEvents(); // Use our function to get all events

    return allEvents
        .filter(existingEvent => {
            // Do not compare an event with itself (important for updates)
            if (newEvent.id && newEvent.id === existingEvent.id) {
                return false;
            }
            const existingEventStart = new Date(existingEvent.start);
            const existingEventEnd = new Date(existingEvent.end);
            return newEventStart < existingEventEnd && newEventEnd > existingEventStart;
        })
        .map(conflictingEvent => ({
            type: 'time_overlap',
            proposedEvent: newEvent,
            conflictingEvent: conflictingEvent
        }));
}

// --- Exported API Functions ---

/**
 * Proposes an event to check for conflicts before creation or update.
 * Throws a '409' error if a conflict is found.
 * @param {object} proposedEvent - The event to check.
 * @returns {object} - A success message if no conflict is found.
 */
export function proposeEvent(proposedEvent) {
    const conflicts = checkConflict(proposedEvent);
    if (conflicts.length > 0) {
        const error = new Error('Proposed event conflicts with existing events.');
        error.code = '409'; // Custom property for client-side handling
        error.data = {
            message: 'Proposed event conflicts with existing events.',
            proposedEvent: proposedEvent,
            conflicts: conflicts
        };
        throw error;
    }
    return { message: 'No conflicts detected.' };
}

/**
 * Retrieves all events from all services.
 * @returns {Array} - A flat array of all events.
 */
export function getEvents() {
    let allEvents = [];
    const serviceData = getServiceEvents();
    for (const serviceId in serviceData) {
        const serviceEvents = serviceData[serviceId].events.map(event => ({ ...event, serviceId }));
        allEvents = allEvents.concat(serviceEvents);
    }
    return allEvents;
}

/**
 * Creates a new event and adds it to the specified service.
 * @param {object} eventData - The event data, must include 'serviceId'.
 * @returns {object} - The newly created event.
 */
export function createEvent(eventData) {
    const { serviceId, ...newEvent } = eventData;
    if (!serviceId || !services[serviceId]) {
        throw new Error('Invalid serviceId provided.');
    }
    const eventToAdd = { ...newEvent, id: generateId() };
    addEventToService(serviceId, eventToAdd);
    return eventToAdd;
}

/**
 * Updates an existing event.
 * @param {number} eventId - The ID of the event to update.
 * @param {object} updatedEventData - The new data for the event.
 * @returns {object} - The updated event object.
 */
export function updateEvent(eventId, updatedEventData) {
    const { serviceId } = updatedEventData;
    if (!serviceId) {
        throw new Error('serviceId is required to update an event.');
    }
    const updatedEvent = updateEventInService(serviceId, eventId, updatedEventData);
    if (!updatedEvent) {
        throw new Error('Event not found or failed to update.');
    }
    return updatedEvent;
}

/**
 * Deletes an event.
 * @param {number} eventId - The ID of the event to delete.
 * @param {string} serviceId - The serviceId from which to delete the event.
 * @returns {object} - A confirmation message.
 */
export function deleteEvent(eventId, serviceId) {
    if (!serviceId) {
        throw new Error('serviceId is required to delete an event.');
    }
    const success = deleteEventFromService(serviceId, eventId);
    if (!success) {
        throw new Error('Event not found or failed to delete.');
    }
    return { message: `Event ${eventId} deleted successfully.` };
}
