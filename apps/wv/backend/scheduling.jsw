import { getServiceAppointments, addAppointmentToService, updateAppointmentInService, deleteAppointmentFromService } from 'backend/services.jsw';

// In a real Wix application, you would use Wix Data Collections for persistent storage.
// For this example, we are replicating the in-memory logic from the original server.js.

/**
 * Checks for scheduling conflicts for a given appointment.
 * @param {object} newAppointment - The appointment object to check.
 * @returns {Array} - A list of conflicting appointments.
 */
/*
async function checkAppointmentConflict(newAppointment) { // Made async
    const newAppointmentStart = new Date(newAppointment.start);
    const newAppointmentEnd = new Date(newAppointment.end);

    const allAppointments = await getAppointments(); // Use our function to get all appointments

    return allAppointments
        .filter(existingAppointment => {
            // Do not compare an appointment with itself (important for updates)
            if (newAppointment._id && newAppointment._id === existingAppointment._id) { // Use _id for Wix Data
                return false;
            }
            const existingAppointmentStart = new Date(existingAppointment.start);
            const existingAppointmentEnd = new Date(existingAppointment.end);
            return newAppointmentStart < existingAppointmentEnd && newAppointmentEnd > existingAppointmentStart;
        })
        .map(conflictingAppointment => ({
            type: 'time_overlap',
            proposedAppointment: newAppointment,
            conflictingAppointment: conflictingAppointment
        }));
}

// --- Exported API Functions ---

/**
 * Proposes an appointment to check for conflicts before creation or update.
 * Throws a '409' error if a conflict is found.
 * @param {object} proposedAppointment - The appointment to check.
 * @returns {object} - A success message if no conflict is found.
 */
export async function proposeAppointment(proposedAppointment) { // Made async
    const conflicts = await checkAppointmentConflict(proposedAppointment); // Await the async function
    if (conflicts.length > 0) {
        const error = new Error('Proposed appointment conflicts with existing appointments.');
        error.code = '409'; // Custom property for client-side handling
        error.data = {
            message: 'Proposed appointment conflicts with existing appointments.',
            proposedAppointment: proposedAppointment,
            conflicts: conflicts
        };
        throw error;
    }
    return { message: 'No conflicts detected.' };
}
*/

/*
/**
 * Retrieves all appointments from all services.
 * @returns {Array} - A flat array of all appointments.
 */
export async function getAppointments() { // Made async
    const allAppointments = await getServiceAppointments(); // Use the updated function
    return allAppointments;
}

/**
 * Creates a new appointment and adds it to the specified service.
 * @param {object} appointmentData - The appointment data, must include 'serviceId'.
 * @returns {object} - The newly created appointment.
 */
export async function createAppointment(appointmentData) { // Made async
    const { serviceId, ...newAppointment } = appointmentData;
    if (!serviceId) { // Removed check for services[serviceId] as services object no longer exists
        throw new Error('Invalid serviceId provided.');
    }
    // No need for generateId() as Wix Data handles _id
    const createdAppointment = await addAppointmentToService(serviceId, newAppointment);
    return createdAppointment;
}

/**
 * Updates an existing appointment.
 * @param {string} appointmentId - The ID of the appointment to update.
 * @param {object} updatedAppointmentData - The new data for the appointment.
 * @returns {object} - The updated appointment object.
 */
export async function updateAppointment(appointmentId, updatedAppointmentData) { // Made async
    const { serviceId } = updatedAppointmentData;
    if (!serviceId) {
        throw new Error('serviceId is required to update an appointment.');
    }
    const updatedAppointment = await updateAppointmentInService(serviceId, appointmentId, updatedAppointmentData);
    if (!updatedAppointment) {
        throw new Error('Appointment not found or failed to update.');
    }
    return updatedAppointment;
}

/**
 * Deletes an appointment.
 * @param {string} appointmentId - The ID of the appointment to delete.
 * @param {string} serviceId - The serviceId from which to delete the appointment.
 * @returns {object} - A confirmation message.
 */
export async function deleteAppointment(appointmentId, serviceId) { // Made async
    if (!serviceId) {
        throw new Error('serviceId is required to delete an appointment.');
    }
    const success = await deleteAppointmentFromService(serviceId, appointmentId);
    if (!success) {
        throw new Error('Appointment not found or failed to delete.');
    }
    return { message: `Appointment ${appointmentId} deleted successfully.` };
}
*/
